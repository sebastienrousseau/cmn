var searchIndex = JSON.parse('{\
"cmn":{"doc":"A Rust library for accessing a collection of mathematical …","t":"DCCLLLLOOOOOOOOOOOOOALLLLLLALLFLLLLLALRRNDEDRNRRRRRRRRRRRRNRNNLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMRDLLLLLLLLLLLLLLLL","n":["Common","Constants","Words","borrow","borrow_mut","clone","clone_into","cmn","cmn_assert","cmn_constants","cmn_contains","cmn_in_range","cmn_join","cmn_max","cmn_min","cmn_parse","cmn_print","cmn_print_vec","cmn_split","cmn_vec","constants","constants","default","deserialize","fmt","from","into","macros","new","parse","run","serialize","to_owned","try_from","try_into","type_id","words","words","AVOGADRO","BOLTZMANN","CharArray","Constant","ConstantValue","Constants","EULER","Float","GAMMA","HASH_ALGORITHM","HASH_COST","HASH_LENGTH","PHI","PI","PLANCK","SILVER_RATIO","SPECIAL_CHARS","SQRT2","SQRT3","SQRT5","String","TAU","U32","Usize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","constant","constants","constants","default","deserialize","eq","equivalent","fmt","fmt","fmt","from","from","from","hash","into","into","into","is_valid","name","new","partial_cmp","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","WORD_LIST","Words","borrow","borrow_mut","clone","clone_into","default","deserialize","fmt","from","into","new","serialize","to_owned","try_from","try_into","type_id","words_list"],"q":[[0,"cmn"],[38,"cmn::constants"],[112,"cmn::words"]],"d":["The <code>Common</code> structure provides a central location to store …","","","","","","","This macro takes any number of arguments and parses them …","This macro asserts that the given condition is true. If the","This macro defines a set of constants with their …","This macro checks if the given string contains the given …","This macro checks if the given value is within the given …","This macro joins the given strings together with the given …","This macro finds the maximum value of the given values.","This macro finds the minimum value of the given values.","This macro parses the given input into a Rust value.","This macro prints the given arguments to the console.","This macro prints the given vector of values to the …","This macro splits the given string into a vector of …","This macro creates a new vector with the given elements.","The <code>constants</code> module contains the <code>Constants</code> structure, …","Returns the <code>Constants</code> instance.","Creates a new instance of the <code>Common</code> structure by calling …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The <code>macros</code> module contains functions for generating macros.","Creates a new instance of the <code>Common</code> structure.","Parses a string of JSON data and returns a new instance of …","This is the main entry point for the <code>Common (CMN)</code> library.","","","","","","The <code>words</code> module contains the <code>Words</code> structure, which …","Returns a new instance of the <code>Words</code> structure.","Avogadro’s constant Approximately 6.02214076 x 10^23","Boltzmann’s constant Approximately 1.380648 x 10^-23","An array of characters represented as <code>&amp;&#39;static [char]</code>.","Contains several commonly used mathematical and …","Enum to represent the different constant values.","The <code>Constants</code> structure holds mathematical and hash …","The base of the natural logarithm, Euler’s number (e). e …","A float value represented as <code>f64</code>.","The mathematical constant <code>γ</code> or the Euler–Mascheroni …","The hash algorithm used. The default is Blake3.","The cost of the hash algorithm. The default is 8.","The hash length is the length of the hash in bytes.","The mathematical constant <code>φ</code> or the golden ratio. It is the","The mathematical constant <code>π</code> or the ratio of a circle’s …","The Planck constant, <code>h</code>.","The mathematical constant `δs’ or the silver ratio (or …","A set of special characters.","The mathematical constant <code>√2</code> or the Pythagora’s …","The mathematical constant <code>√3</code> or the  principal square …","The mathematical constant <code>√5</code> or the principal square …","A string value.","The mathematical constant <code>τ</code> or the ratio of a circle’s …","An unsigned 32-bit integer value represented as <code>u32</code>.","An unsigned integer with the size of a pointer represented …","","","","","","","","","","","","","","Returns a vector of tuples with the constant name and its …","Returns a vector of tuples with the constant name and its …","A vector of constants.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the <code>Constants</code> structure is valid. …","The name of the constant.","Create a new instance of the <code>Constants</code> structure.","","","","","","","","","","","","","","","","","The value of the constant.","The list of words.","Contains several words for use in generating passphrases.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance of <code>Words</code>.","","","","","","Returns a list of words for use in generating passphrases."],"i":[0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,14,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,14,0,14,14,13,2,14,13,2,14,13,2,14,13,2,14,13,2,2,2,2,13,13,13,13,2,14,13,2,14,13,13,2,14,2,13,2,13,13,2,14,13,2,14,13,2,14,13,2,14,13,2,14,13,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"f":[0,0,0,[[]],[[]],[1,1],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[],1],[3,[[4,[1]]]],[[1,5],6],[[]],[[]],0,[[],1],[7,[[4,[1,[9,[8]]]]]],[[],[[4,[[9,[8]]]]]],[[1,10],4],[[]],[[],4],[[],4],[[],11],0,[1,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[2,2],[14,14],[[]],[[]],[[]],[[13,13],15],[[2,7],[[16,[13]]]],[2,[[17,[13]]]],0,[[],2],[3,[[4,[13]]]],[[13,13],18],[[],18],[[13,5],6],[[2,5],6],[[14,5],6],[[]],[[]],[[]],[[13,19]],[[]],[[]],[[]],[2,18],0,[[],2],[[13,13],[[16,[15]]]],[[13,10],4],[[2,10],4],[[14,10],4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],11],[[],11],[[],11],0,0,0,[[]],[[]],[12,12],[[]],[[],12],[3,[[4,[12]]]],[[12,5],6],[[]],[[]],[[],12],[[12,10],4],[[]],[[],4],[[],4],[[],11],[12,[[20,[7]]]]],"c":[],"p":[[3,"Common"],[3,"Constants"],[8,"Deserializer"],[4,"Result"],[3,"Formatter"],[6,"Result"],[15,"str"],[8,"Error"],[3,"Box"],[8,"Serializer"],[3,"TypeId"],[3,"Words"],[3,"Constant"],[4,"ConstantValue"],[4,"Ordering"],[4,"Option"],[3,"Vec"],[15,"bool"],[8,"Hasher"],[15,"slice"]]},\
"xtask":{"doc":"This is the main entry point for the xtask crate.","t":"F","n":["main"],"q":[[0,"xtask"]],"d":[""],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[3,"Error"],[4,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

searchState.loadedDescShard("cmn", 0, "A Rust library for accessing a collection of mathematical …\nThe <code>Common</code> structure provides a central location to store …\nThis macro takes any number of arguments and parses them …\nThis macro asserts that the given condition is true. If the\nThis macro defines a set of constants with their …\nThis macro checks if the given string contains the given …\nThis macro checks if the given value is within the given …\nThis macro joins the given strings together with the given …\nThis macro creates a new map of the given key-value pairs.\nThis macro finds the maximum value of the given values.\nThis macro finds the minimum value of the given values.\nThis macro parses the given input into a Rust value.\nThis macro prints the given arguments to the console.\nThis macro prints the given vector of values to the …\nThis macro splits the given string into a vector of …\nThis macro converts the given string to a number.\nThis macro creates a new vector with the given elements.\nThe <code>constants</code> module contains the <code>Constants</code> structure, …\nReturns the <code>Constants</code> instance.\nCreates a new instance of the <code>Common</code> structure by calling …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>macros</code> module contains functions for generating macros.\nCreates a new instance of the <code>Common</code> structure.\nParses a string of JSON data and returns a new instance of …\nThis is the main entry point for the <code>Common (CMN)</code> library.\nThe <code>words</code> module contains the <code>Words</code> structure, which …\nReturns a new instance of the <code>Words</code> structure.\nApéry’s constant, which is the sum of the reciprocals …\nAvogadro’s constant, which is the number of constituent …\nBoltzmann’s constant, which relates the average kinetic …\nCatalan’s constant, which is the sum of the alternating …\nCoulomb’s constant, which is the proportionality …\nAn array of characters represented as <code>&amp;&#39;static [char]</code>.\nContains several commonly used mathematical and …\nEnum to represent the different constant values.\nThe <code>Constants</code> structure holds mathematical and hash …\nThe base of the natural logarithm, Euler’s number. e ≈ …\nFaraday constant, which represents the amount of electric …\nA float value represented as <code>f64</code>.\nThe Euler-Mascheroni constant, which is the limiting …\nThe gas constant, which relates the energy scale to the …\nGlaisher-Kinkelin constant, which arises in the asymptotic …\nThe gravitational constant, which is the proportionality …\nThe hash algorithm used. The default is Blake3.\nThe cost of the hash algorithm. The default is 8.\nThe hash length is the length of the hash in bytes.\nKhinchin’s constant, which appears in the theory of …\nThe golden ratio, which is the limit of the ratio of …\nThe ratio of a circle’s circumference to its diameter. …\nPlanck’s constant, which relates the energy of a photon …\nPlanck’s reduced constant, which is Planck’s constant …\nThe silver ratio, which is one of the silver means. δ_s = …\nA set of special characters.\nThe speed of light in vacuum. c ≈ 299792458 m s^-1\nThe square root of 2. √2 ≈ …\nThe square root of 3. √3 ≈ …\nThe square root of 5. √5 ≈ 2.23606797749979\nA string value.\nThe circle constant, which is the ratio of a circle’s …\nAn unsigned 32-bit integer value represented as <code>u32</code>.\nAn unsigned integer with the size of a pointer represented …\nThe vacuum permeability, which relates magnetic induction …\nThe vacuum permittivity, which relates electric …\nReturns a vector of tuples with the constant name and its …\nReturns a vector of tuples with the constant name and its …\nA vector of constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of the constant.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Constants</code> structure is valid. …\nThe name of the constant.\nCreate a new instance of the <code>Constants</code> structure.\nThe value of the constant.\nThe predefined list of words used to initialize the <code>Words</code> …\nA structure to hold and manage a set of words.\nAdds a word to the set.\nClears all words from the set.\nChecks if a word exists in the set.\nReturns the number of words in the set.\nPopulates the <code>Words</code> struct with a predefined list of words.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new, empty <code>Words</code>.\nRemoves a word from the set.\nConstructs a new <code>Words</code> instance from a list of words.\nThe set of words stored in the structure.\nReturns a list of all words stored in the structure.")